结论：SpringMVC项目共有三个配置文件：
      1）web.xml webapp的配置文件，webapp的启动文件，入口点，定义了webapp的很多功能
      2）applicationContext.xml 应用上下文配置文件
      3）spring-mvc.xml SpringMVC的配置文件，包括启用SpringMVC的组件扫描功能，定义控制器bean等

1. 控制器在配置文件中，使用<bean>节点进行申明，控制器节点的<bean>需要声明在spring-mvc.xml中，若将控制器<bean>
   声明在web.xml中，会出现如下xml文件报错：
   cvc-complex-type.2.4.a: Invalid content was found starting with element 'bean'. One of '
   {"http://java.sun.com/xml/ns/javaee":description, "http://java.sun.com/xml/ns/javaee":display-name, 
   原因是：web.xml中使用的xml命名空间中，未定义<bean>节点，可以尝试对比web.xml和spring-mvc.xml的根节点
   中的xmlns:xsi和xsi:schemalocation中的url指向的具体资源内容，这些url指向的资源都是可以直接在浏览器中
   打开的


总结：前端控制器和控制器区别
      1）SpringMVC中前端控制器，指的就是好DispatcherServlet
      2）其他的业务逻辑相关的被称为控制器，使用@Controller注解


总结：工程中，配置文件中的路径，根路径"/"代表的是webapp，如希望配置WEB-INF下的配置或资源文件，
      路径需要设置为/WEB-INF/spring-mvc.xml


总结：SpringMVC 三个配置文件的路径
      1）web.xml 此配置文件的名称只能是这样，不能做任何改动。若使用Maven模板创建的项目，则此文件
        自动创建，并文件位于src/main/webapp/WEB-INF/web.xml
      2）SpringMVC配置文件 文件可变，文件名一般习惯使用spring-mvc.xml 此文件路径可以随意，需要将此文件
        的路径配置在web.xml的dispatcherservlet的init-param参数中，具体配置见下文
      3）应用程序上下文配置文件，文件名一般习惯名称为applicationContext.xml，此文件路径可以随意

总结：SpringMVC 三个配置文件的作用
      1. web.xml 配置webapp的全局功能，比如超时，首页，不同错误码的返回页面。对于使用任何框架的webapp
         都有此文件，无论是使用SSH还是SpringMVC。
         1）web.xml中通常使用<context-param>节点配置 applicationContext.xml在项目中的路径
         2）spring-mvc.xml或springmvc.xml 是在dispathcerservlet的<servlet>节点中，通过<init-param>参数指定

      2. spring-mvc.xml或springmvc.xml 此配置文件是主要是配置组件扫描、Controller、视图解析器的。
         1）可以通过<mvc:resources>节点，配置那些路径下的那些类型的文件属于静态资源，当client请求这些静态
            资源时，dispatcherservlet将直接发挥这些资源，不转发给controller处理
         2）通过<mvc:annotation-driven> 使能注解驱动功能，如果没有此配置，则代码中所使用的注解功能无法实现
            在springmvc.xml中添加此配置项，告诉SpringMVC框架在启动SpringMVC框架时，主动注册DefaultAnnotationHandlerMapping
	    和AnnotationMethodHandlerAdapter这两个bean，这两个bean为代码中使用注解做了初始化操作。
         3）通过<context:component-scan>配置，指定SpringMVC容器在创建bean时的扫描路径，SpringMVC容器会为此配置
            项指定的package下的@Component或@Controller创建单例bean实例
	 4）<bean>节点，配置与Controller中控制器方法映射的url，url的格式是http://ip:port/webappName/Controller类的注解/Controller处理方法的注解
	    注意注解中要加"/"路径分隔符，在拼接与url对应的路径时，是纯粹的字符串拼接
	    example1：
            @RequestMapping("/kelvin")
            public class MyController(){
		
		@RequestMapping("/levelOne")
		public @ResponseBody String levelOne(){
			return "levelOne";
		}		

	    }
            此例中，levelOne处理器方法的url是 http://localhost:8090/test(webappName)/kelvin(Controller类上的注解)/levelOne（处理器方法上的注解）
 
	    example2 ：
            public class MyController(){
		
		@RequestMapping("/levelOne")
		public @ResponseBody String levelOne(){
			return "levelOne";
		}		

	    }
            此例中，levelOne处理器方法的url是 http://localhost:8090/test(webappName)/levelOne，由于Controller类上无路径字段，
            因此相比于example1，少一段
		
      3. applicationContext.xml 配置数据源访问的

